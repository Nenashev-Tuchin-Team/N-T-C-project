#pragma once
/*
Динамически растущий стек на массиве
Author: Nenashev Nikolai
Noscow IPT 2019.
*/
#include <stdlib.h>
typedef int T;
#define STACK_OVERFLOW -100
#define STACK_UNDERFLOW -101
#define OUT_OF_MEMORY -102
#define INITIAL_SIZE 10
#define MULTIPLIER 2 
/*
Структура, описывающая стек:
Указатель на массив данных
Размер стека
Номер верхнего элемента
*/
typedef struct Stack_
{
	T* data;
	int size;
	int top;
} my_stack;
/*
Функция создающая стек.
Аргументов нет, возвращает указатель
на стек.
*/
my_stack* stack_create();
/*
Функция для удаления стека.
Аргументы: адрес указателя на стек
Не возвращает значений.
*/
void delete_stack(my_stack** s);
/*
Вспомогательная функция для изменения
размера массива в стеке.
Аргументы: указатель на стек;
Не возвращает значений.
*/
void resize(my_stack* s);
/*
Вспомогательная функция для 
уменьшения размера стека в массиве.
Может быть использована в случае, 
когда размер стека стал слишком большим.
*/
void implode(my_stack* s);
/*
Функция вставляет элемент в стек.
Аргументы: указатель на стек и значение.
Не возвращает значений.
*/
void stack_push(my_stack* s, T value);
/*
Функция удаляет элемент из стека 
и возвращает его значение.
Аргументы: указатель на стек.
Возвращает удаленное значение.
*/
T stack_pop(my_stack* s);
/*
Функция возвращает вершину стека,
не удаляя ее.
Аргументы: указатель на стек.
Возвращает вершину стека.
*/
T get_top(my_stack* s);
/*
Инициализация и деинициализация
*/
int test1();
/*
Тест Push и pop 
*/
int test2();
/*
Тест implode
*/
int test3();
/*
Тест на STACK_OVERFLOW
*/
int test4();
/*
Тест на STACK_UNDERFLOW
*/
int test5();
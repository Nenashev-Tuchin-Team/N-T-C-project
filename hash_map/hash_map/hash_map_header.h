#pragma once
/*
Hash-map
Author: Nikolai Nenashev
Реализация хэш-таблицы по ключу - строке.
В случае коллизий по одному ключу будут храниться
несколько значений в виде списка.
Для использования функций хэш-таблицы обязательно
проинициализируйте ее функциями init_table и
в конце работы !!!ДЕИНИЦИАЛИЗИРУЙТЕ ТАБЛИЦУ!!! 
функцией deinit_table.
Moscow IPT 2019.
*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define N 256
#define UNINITIALIZED -102
#define OUT_OF_MEMORY -101
#define EMPTY_LIST_ERROR -100
typedef long long int T;

/*
Структура, описывающая узел списка.
*/
typedef struct Node_
{
	char* str;
	T value;
	struct Node_* next;
} Node;

/*
Структура описывающая односвзяный список.
*/
typedef struct List_
{
	Node* head;
} list;

/*
Хэш-функция.
Аргументы: строка символов.
Возвращает целочисленное значение - ключ.
*/
int hash1(char* str);

/*
Функция инициализирует таблицу NULL - значениями.
В качестве аргументов принимает саму таблицу, состоящую
из указателей на список.
Ничего не возвращает.
*/
void init_table(list** hash_table);

/*
Функция деинициализирует таблицу - освобождает зааллоцированную
память. В качестве аргумента принимает хэш-таблицу.
Ничего не возвращает.
*/
void deinit_table(list** map);

/*
Вспомогательная функция, добавляющаяя новое значение 
(пара {строка, целочисленное значение}) в список.
В качестве аргументов принимает указатель на список,
целое значение и строку.
*/
void push_front(list* l, T value, char* str);

/*
Вспомогательная функция, удаляющая узел списка.
Аргументы: укзаатель на список и указатель на узел.
Ничего не возвращает.
*/
void del_node(list* l, Node* elem);

/*
Функция добавляет указанное значение в хеш-таблицу.
В случае, если в таблице уже есть такой элемент -
элемент не добавляется.
Аргументы: строка символов и значение.
Ничего не возвращает.
*/
void insert_value(char* str, T value);

/*
Удаляет из хеш-таблицы значения с указанной строкой.
Если таких значений нет - ничего не удаляется.
Аргументы: строка символов.
Возвращает 1 в случае удаления и 0 в противном случае.
*/
int delete_key(char* str);

/*
Находит в таблице элемент с указанной строкой.
Если таких элементов нет - вернет NULL.
Принимает в качестве аргументов строку символов.
Возвращает указатель на узел, где содержится 
искомый элемент.
*/
Node* find_key(char* str);

/*
Находит в таблице элемент с указанной строкой и значением.
Если таких элементов нет - вернет NULL.
Принимает в качестве аргументов строку символов и значение.
Возвращает указатель на узел, где содержится
искомый элемент.
*/
Node* find_key_and_value(char* str, T value);

/*
Вспомогательная функция, печатающая список.
Аргументы: указатель на список.
Ничего не возвращает.
*/
void print_list(list* l);

/*
Функция, печатающая хэш-таблицу.
Аргументы: хэш-таблица.
Ничего не возвращает.
*/
void print_map(list** hash_map);

/*
Вспомогательная функция, удаляющая 
список.
Аргументы: указатель на список.
Ничего не возвращает.
*/
void delete_list(list* q);










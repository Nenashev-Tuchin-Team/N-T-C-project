#pragma once
/*
Sigle-linked list project
Authors: Nenashev Nikolai.
Moscow IPT 2019.
Файл содержит основные функции для работы 
с односвязным списком. Для создания списка
используйте указатель на его голову.
Пример:
Node* list1 = NULL;
Далее воспользуйтесь функцией create_list:
list1 = create_list(your value);
!!!!!!НЕ ЗАБУДЬТЕ ДЕИНИЦИАЛИЗИРОВАТЬ СПИСОК ФУНКЦИЕЙ pop_list!!!!!!!!
*/
#include<stdlib.h>
#include<stdio.h>
/*
Структура, описывающая узел списка
*/
typedef struct Node_
{
	int value;
	struct Node_* next;
} Node;
/*
Аргументы: значение головы списка.
Функция создает голову списка с 
указанным значением и возвращает
указатель нее.
*/
Node* create_list(int value);
/*
Аргументы:адрес указателя на голову списка, передаваемое значение
Функция, добавляющая элемент в голову списка.
Возвращает 1 в случае успешного добавления элемента
И 0 в случае неуспешного.
*/
int push_head(Node** head, int value);
/*
Аргументы: адрес указателя на голову списка
Функция удаляет голову списка.
В случае успеха возвращает 1, иначе - 0.
*/
int pop_head(Node** head);
/*
Аргументы: указатель на голову списка, 
номер элемента, который нужно найти
Функция возвращает NULL значение в случае когда N больше
длины списка, иначе возвращает указатель на последний элемент.
*/
Node* get_N(Node* head, int n);
/*
Аргументы: указатель на голову списка
Функция возвращает указатель на конец списка.
*/
Node* get_back(Node* head);
/*
Аргументы: указатель на голову списка, значение
Функция добавляет элемент в конец списка.
Возвращает 1 в случае успеха и 0 в противном случае. 
*/
int push_back(Node** head, int value);
/*
Аргументы: указатель на голову списка
Функция возвращает указатель на предпоследний элемент списка.
В случае его отсутствия - NULL.
*/
Node* get_prev_back(Node* head);
/*
Аргументы: адрес указателя на голову списка.
Функция удаляет последний элемент списка.
Если список состоит из одного элемента - удалит его.
Возвращает 1 в случае успеха и 0 в противном случае.
*/
int pop_back(Node** head);
/*
Аргументы: указатель на голову списка.
Печатает содержимое списка.
*/
void print_list(Node* head);
/*
Аргументы: указатель на голову списка, место, значение
Функция добавляет элемент на n-ое место в списке.
Если n больше длины списка, то вставит в конец.
Возвращает 1 в случае успеха и 0 в противном случае.
*/
int push_N(Node** head, int n, int value);
/*
Аргументы: адрес указателя на голову списка, место.
Функция удаляет n-ый элемент списка.
Если n больше длины списка, удаляет последнй элемент.
Возвращает 1 в случае успеха и 0 в противном случае.
*/
int pop_N(Node** head, int n);
/*
Аргументы: адрес указателя на голову списка.
Функция удаляет список.
Возвращает 1 в случае успеха и 0 в противном случае.
*/
int pop_list(Node** head);
/*
Аргументы: указатель на голову списка, искомое значение
Функция возвращает указатель на первый узел списка с 
искомым значением, если такого нет - NULL.
*/
Node* list_find(Node* head, int value);
/*
Аргументы: адрес указателя на голову списка, значение 
Функция удаляет все узлы с указанным значением.
Возвращает количество удаленных узлов.
*/
int remove_value(Node** head, int value);
/*
Функция из задания, которая конструирует список вида
N->(N-1)->...->1->NULL
Возвращает пустой указатель при N = 0, иначе возвращает
указатель на голову списка.
*/
Node* first_N_int(int N);
/*
Тест на создание и удаление.
*/
int test1();
/*
Тест функций pop и push head.
*/
int test2();
/*
Тест функций pop и push back.
*/
int test3();
/*
Тест на функции push и pop Nый элемент.
*/
int test4();
/*
Тест функции find.
*/
int test5();
/*
Тест функции remove_value
*/
int test6();
/*
Тест функции из задания (first_N_int).
*/
int test7();